source("https://bioconductor.org/biocLite.R")
biocLite("erccdashboard")
library("erccdashboard")
library(readr)
ERCC92_Counts <- read_csv("~/Documents/ERCC92_Counts.csv")
View(ERCC92_Counts)
head(ERCC92_Counts)
datType = "count"
isNorm = FALSE
exTable = ERCC92_Counts
View(ERCC92_Counts)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
ERCC92_RNRN_Counts <- read_csv("~/Documents/ERCC92_RNRN_Counts.csv")
View(ERCC92_RNRN_Counts)
library(readr)
ERCC92_RNNB_Counts <- read_csv("~/Documents/ERCC92_RNNB_Counts.csv")
View(ERCC92_RNNB_Counts)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
ERCC92_RNRN_Counts <- read_csv("~/Documents/ERCC92_RNRN_Counts.csv")
View(ERCC92_RNRN_Counts)
datType = "count"
isNorm = FALSE
exTable = ERCC92_RNRN_Counts
filenameRoot = "RNRN"
sample1Name = "RN"
sample2Name = "RS"
erccmix = "single"
erccdilution = 1/100
spikeVol = 2
totalRNAmass = 1
choseFDR = 0.05
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=ERCC92_RNRN_Counts, filenameRoot = "RNRN", sample1Name = "RN", sample2Name = "RF", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
head (ERCC92_RNRN_Counts)
View(ERCC92_RNRN_Counts)
View(ERCC92_RNRN_Counts)
View(ERCC92_RNRN_Counts)
class (ERCC92_RNRN_Counts)
fu <- as.data.frame(ERCC92_RNRN_Counts)
class(fu)
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=ERCC92_RNRN_Counts, filenameRoot = "RNRN", sample1Name = "RN", sample2Name = "RF", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
library("erccdashboard")
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=ERCC92_RNRN_Counts, filenameRoot = "RNRN", sample1Name = "RN", sample2Name = "RF", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
source (Bioconductor)
source ("https://bioconductor.org/bioclite.R")
source ("https://bioconductor.org/biocLite.R")
biocLite ("erccdashboard")
library("erccdashboard")
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=fu, filenameRoot = "RNRN", sample1Name = "RN", sample2Name = "RF", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=fu, filenameRoot = "RNRN", sample1Name = "RN", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
library(readr)
ERCC92_RZRS_counts <- read_csv("~/Documents/ERCC92_RZRS_counts.csv")
View(ERCC92_RZRS_counts)
fu <- as.data.frame(ERCC92_RZRS_counts)
class(fu)
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=fu, filenameRoot = "RZRS", sample1Name = "RZ", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
library(readr)
ERCC92_RZRS_counts <- read_csv("~/Documents/ERCC92_RZRS_counts.csv")
View(ERCC92_RZRS_counts)
fu <- as.data.frame(ERCC92_RZRS_counts)
class(fu)
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=fu, filenameRoot = "RZRS", sample1Name = "RZ", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
exDat <- initDat(datType="count", isNorm = FALSE, exTable=fu, filenameRoot = "RZRS", sample1Name = "RZ", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
exDat <- geneExprTest(exDat)
exDat <- erccROC(exDat)
exDat <- estLODR(exDat, kind = "ERCC", prob = 0.9)
exDat <- annotLODR(exDat)
saveERCCPlots(exDat, plotsPerPg = "single", plotlist = exDat$Figures)
koko = read.csv("ERCC_RNRS_counts.csv")
library(readr)
ERCC92_RNRS_counts <- read_csv("~/Documents/ERCC92_RNRS_counts.csv")
View(ERCC92_RNRS_counts)
koko = read.csv("ERCC_RNRS_counts.csv")
koko <- as.data.frame(ERCC92_RNRS_counts)
class(koko)
exDat <- initDat(datType="count", isNorm = FALSE, exTable=koko, filenameRoot = "RNRS", sample1Name = "RN", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
exDat <- geneExprTest(exDat)
exDat <- erccROC(exDat)
exDat <- annotLODR(exDat)
saveERCCPlots(exDat, plotsPerPg = "single", plotlist = exDat$Figures)
library(readr)
ERCC92_RSNB_counts <- read_csv("~/Documents/ERCC92_RSNB_counts.csv")
View(ERCC92_RSNB_counts)
bun = read.csv("ERCC_RSNB_counts.csv")
View(ERCC92_RSNB_counts)
bun = read.csv("ERCC92_RSNB_counts")
bun = read.csv("ERCC92_RSNB_counts.csv")
library(readr)
ERCC92_RSNB_counts <- read_csv("~/Documents/ERCC92_RSNB_counts.csv")
View(ERCC92_RSNB_counts)
bun = read.csv("ERCC92_RSNB_counts.csv")
bun = read.csv(ERCC92_RSNB_counts)
bun = read.csv("ERCC92_RSNB_counts")
koko <- as.data.frame(ERCC92_RSNB_counts)
exDat <- initDat(datType="count", isNorm = FALSE, exTable=koko, filenameRoot = "RSNB", sample1Name = "RS", sample2Name = "NB", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
exDat <- geneExprTest(exDat)
exDat <- erccROC(exDat)
exDat <- annotLODR(exDat)
saveERCCPlots(exDat, plotsPerPg = "single", plotlist = exDat$Figures)
exDat <- initDat(datType="count", isNorm = FALSE, exTable=koko, filenameRoot = "RSNB", sample1Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- initDat(datType="count", isNorm = FALSE, exTable=koko, filenameRoot = "RSNB", sample1Name = "RS", sample2Name = "RS" erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
ERCC92_RSNB_counts <- read_csv("~/Documents/ERCC92_RSNB_counts.csv")
View(ERCC92_RSNB_counts)
koko <- as.data.frame(ERCC92_RSNB_counts)
class(koko)
exDat <- initDat(datType="count", isNorm = FALSE, exTable=koko, filenameRoot = "RSNB", sample1Name = "RS", sample2Name = "NB" erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- initDat(datType="count", isNorm =FALSE, exTable=koko, filenameRoot = "RSNB", sample1Name = "RS", sample2Name = "NB", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
exDat <- geneExprTest(exDat)
exDat <- erccROC(exDat)
exDat <- estLODR(exDat, kind = "ERCC", prob = 0.9)
saveERCCPlots(exDat, plotsPerPg = "single", plotlist = exDat$Figures)
exDat <- annotLODR(exDat)
saveERCCPlots(exDat, plotsPerPg = "single", plotlist = exDat$Figures)
saveERCCPlots(exDat, plotsPerPg = "single", plotlist = exDat$Figures)
exDat <- maSignal(exDat)
exDat$Figures$maPlot
exDat <- estLODR(exDat, kind = "ERCC", prob = 0.9)
library(edgeR)
library(ggplot2)
theme_set(theme_bw(base_size = 16))
source("functions.R")
library(readr)
ERCC92_RNRS_counts <- read_csv("~/Documents/BIOO/R files/ERCC92_RNRS_counts.csv")
View(ERCC92_RNRS_counts)
koko <- as.data.frame(ERCC92_RNRS_counts)
library("erccdashboard")
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=fu, filenameRoot = "RZRS", sample1Name = "RZ", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=koko, filenameRoot = "RNRS", sample1Name = "RN", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
exDat <- runDashboard(datType="count", isNorm = FALSE, exTable=koko, filenameRoot = "RNRS", sample1Name = "RN_X", sample2Name = "RS_X", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05 )
exDat <- initDat(datType="count", isNorm =FALSE, exTable=koko, filenameRoot = "RNRS", sample1Name = "RN", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
grid.arrange(exDat$Figures$dynRangePlot)
library(readr)
ERCC92_RZRS_counts <- read_csv("~/Documents/BIOO/R files/ERCC92_RZRS_counts.csv")
View(ERCC92_RZRS_counts)
bun <- as.data.frame(ERCC92_RZRS_counts)
exDat <- initDat(datType="count", isNorm =FALSE, exTable=bun, filenameRoot = "RZRS", sample1Name = "RZ", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
grid.arrange(exDat$Figures$dynRangePlot)
fit <-glm(y~x)
call <-glm(exDat)
legend("topright",bty = n, legend = paste("R2 is", format(summary(fit)$adj.r.squared, digits = 4)))
legend("topright",bty = n, legend = paste("R2 is", format(summary(exDat)$adj.r.squared, digits = 4)))
legend("topright",bty = n, legend = paste("R2 is", format(summary(exDat)adj.r.squared, digits = 4)))
legend("topright",bty = n, legend = paste("R2 is", format(summary(exDat)[adj.r.squared, digits = 4])))
is.atomic(exDat)
is.recursive(exDat)
summary(fit)
summary(exDat)
summary(exDat)$r.squared
summary(exDat)[r.squared]
summary(glm)
library(readr)
ERCC92_RSNB_counts <- read_csv("~/Documents/BIOO/R files/ERCC92_RSNB_counts.csv")
View(ERCC92_RSNB_counts)
bongo <- as.data.frame(ERCC92_RSNB_counts)
exDat <- initDat(datType="count", isNorm =FALSE, exTable=bongo, filenameRoot = "RSNB", sample1Name = "RS", sample2Name = "NB", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
grid.arrange(exDat$Figures$dynRangePlot)
summary(r_m)
exDat <- geneExprTest(exDat)
exDat <- initDat(datType="count", isNorm =FALSE, exTable=bun, filenameRoot = "RZRS", sample1Name = "RZ", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
exDat <- geneExprTest(exDat)
exDat <- initDat(datType="count", isNorm =FALSE, exTable=koko, filenameRoot = "RNRS", sample1Name = "RN", sample2Name = "RS", erccmix = "Single", erccdilution = 1/100, spikeVol = 2, totalRNAmass = 1, choseFDR = 0.05)
exDat <- est_r_m(exDat)
exDat <- dynRangePlot(exDat)
exDat <- geneExprTest(exDat)
summary(RNRS.RN.RS.All.Pvals.csv)
biocvalid()
source ("http://www.bioconductor.org/bioclite.R")
bioclite ()
source("http://www.bioconductor.org/biocLite.R")
biocLite()
biocValid()
x = 1:10
x
names(x) = letters[1:10]
class(x)
x[1:5]
x[c("a","d")]
x = 1
class(x)
.Machine@integer.max
.Machine$integer.max
x = matrix(1:9, nrow = 3, ncol = 3)
x
x = list(a = rnorm(3), b = letters[1:5], matrix)
x
x = matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
x
x = list(a = rnorm(3), b = letters[1:5], matrix)
x
library(IRanges)
ir1 <- IRanges(start = c(1,3,5), end = c(3,5,7))
ir1
ir2 <- IRanges(start = c(1,3,5), width = 3)
ir2
start(ir1)
width(ir2) <- 1
ir2
names(ir1) <- paste("A", 1:3, sep = "")
ir1
install.packages("rmarkdown")
---
title: "Viridis Demo"
output: html_document
---
```{r include = FALSE}
library(viridis)
```
The code below demonstrates two color palettes in the [viridis](https://github.com/sjmgarnier/viridis) package. Each plot displays a contour map of the Maunga Whau volcano in Auckland, New Zealand.
## Viridis colors
```{r}
image(volcano, col = viridis(200))
```
## Magma colors
```{r}
image(volcano, col = viridis(200, option = "A"))
```
library(viridis)
image(volcano, col = viridis(200))
image(volcano, col = viridis(200, option = "A"))
library(viridis)
image(volcano, col = viridis(200))
image(volcano, col = viridis(200, option = "A"))
image(volcano, col = viridis(200, option = "A"))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
setwd("/Users/kokushka/Documents/First Year/Wilke Lab/Programs/")
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein,group=species) + geom_line(aes(color=species)) + ggtitle("Protein Production Rate and Free Ribosomes in Half-Slow Transcript", subtitle = waiver()))
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein,group=species) + geom_line(aes(color=species))
gene_plot
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein,group=species) + geom_line(aes(color=species)))
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species) + geom_line(aes(color=species)))
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species))
plot(gene_plot)
save_plot("half_slow_example.png", gene_plot, base_aspect_ratio = 1.3)
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species) + geom_line(aes(color=species)))
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species, color = species) + geom_line())
#Here is my *attempt* at markdown **editing**
It seems that the markdown language uses similar style as slack
head(cars)
plot(cars$speed, cars$dist) + abline(lm(mpg~wt), col = "red")
head(cars)
plot(cars$speed, cars$dist) + abline(lm(speed~dist), col = "red")
head(cars)
plot(cars$speed, cars$dist) + abline(lm(cars$speed~ cars$dist), col = "red")
head(cars)
plot(cars$speed, cars$dist) + abline(lm(cars$dist~cars$speed), col = "red")
## 1.1. Here is my *attempt* at markdown **editing**
It seems that the markdown language uses similar style as slack
1. I have an outline
2. it goes like this
+ 2a and this
+ 2b and this
## 1.1. Here is my *attempt* at markdown **editing**
It seems that the markdown language uses similar style as slack
1. I have an outline
2. it goes like this
+ 2a. and this
+ 2b. and this
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species) + geom_line(aes(color = species)))
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, mapping = aes(x=time, y=protein, group=species) + geom_line(aes(color = species)))
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes_(x=time, y=protein, group=species) + geom_line(aes(color = species)))
getwd()
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=pinetree_plot$time, y=pinetree_plot$protein, group=species) + geom_line(aes(color = species)))
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species)) + geom_line(aes(color = species))
plot(gene_plot)
save_plot("half_slow_example.png", gene_plot, base_aspect_ratio = 1.3)
pinetree_counts <- read.table("test_protein_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
gene_plot <- ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species)) + geom_line(aes(color = species)) + ggtitle("Protein Production Rate with half slow, half fast codons")
plot(gene_plot)
save_plot("half_slow_example.png", gene_plot, base_aspect_ratio = 1.3)
# R code goes here.
t.test(plants$ctrl,plants$trt1)
head(PlantGrowth)
plants <- unstack(PlantGrowth)
head(plants)
boxplot(plants)
# R code goes here.
t.test(plants$ctrl,plants$trt1)
# R code goes here.
t.test(plants$ctrl,plants$trt1)
t.test(plants$trt1,plants$trt2)
# R code goes here.
t.test(plants$ctrl,plants$trt1)
t.test(plants$trt1,plants$trt2)
t.test(plants$ctrl,plants$trt2)
# R code goes here.
t.test(plants$ctrl,plants$trt1)
t.test(plants$trt1,plants$trt2)
t.test(plants$ctrl,plants$trt2)
fit <- lm(weight~group,data= PlantGrowth)
anova(fit)
head(cars)
# R code goes here.
cor.test(cars$speed,cars$dist)
plot(cars$speed,cars$dist)
# R code goes here.
cor.test(cars$speed,cars$dist)
plot(cars$speed,cars$dist) + lm(cars$dist~cars$speed, data=cars)
# R code goes here.
cor.test(cars$speed,cars$dist)
plot(cars$speed,cars$dist) + abline(lm(cars$dist~cars$speed), col = "red")
library(MASS) # load the MASS library to make the data set available
head(cabbages)
# R code goes here.
regression <- lm(VitC~HeadWt+Cult, data = MASS)
# R code goes here.
regression <- lm(VitC~HeadWt+Cult, data = cabbages)
# R code goes here.
regression <- lm(VitC~HeadWt+Cult, data = cabbages)
summary(regression)
# R code goes here.
regression <- lm(VitC~HeadWt+Cult, data = cabbages)
summary(regression)
anova(regression)
# R code goes here.
newdata <- data.frame(Cult = "c52", HeadWt = 4)
predict(regression,newdata)
plant_lengths <- ggplot(iris, aes(x=Petal.Length, y= Sepal.Length, xlab = "petal", ylab = "sepal")) + geom_point(color= species)
plant_lengths <- ggplot(iris, aes(x=Petal.Length, y= Sepal.Length, xlab = "petal", ylab = "sepal")) + geom_point(color= species)
ggplot(plant_lengths)
plant_lengths <- ggplot(iris, aes(x=Petal.Length, y= Sepal.Length, xlab = "petal", ylab = "sepal")) + geom_point(color= species)
plant_lengths
ggplot(iris, aes(x=Petal.Length, y= Sepal.Length, xlab = "petal", ylab = "sepal")) + geom_point(color= species)
ggplot(iris, aes(x=Petal.Length, y= Sepal.Length, xlab = "petal", ylab = "sepal")) + geom_point(aes(color= species))
ggplot(iris, aes(x=Petal.Length, y= Sepal.Length, xlab = "petal", ylab = "sepal")) + geom_point()
ggplot(iris, aes(x=Petal.Length, y= Sepal.Length, color = Species)) + geom_point()
ggplot(iris, aes(x=Petal.Length, y= Sepal.Length)) + geom_point() + facet_wrap(~Species)
ggplot(iris, aes(x=Petal.Length, y= Sepal.Length, color = Species)) + geom_point() + facet_wrap(~Species)
# R code goes here.
ggplot(iris, aes(x=Sepal.Length, xlab = Species)) + geom_boxplot()
# R code goes here.
ggplot(iris, aes(x=Species, y = Sepal.Length)) + geom_boxplot()
# R code goes here.
ggplot(iris, aes(x=Species, y = Sepal.Length, color = Species)) + geom_boxplot()
# download the sitka data set:
sitka <- read.csv("http://wilkelab.org/classes/SDS348/data_sets/sitka.csv")
head(sitka)
# R code goes here.
ggplot(sitka, aes(x=size, y = Time, color = treat)) + geom_line() + facet_wrap(~treat)
# R code goes here.
ggplot(sitka, aes(x=size, y = Time, color = treat, group = tree)) + geom_line() + facet_wrap(~treat)
# R code goes here.
ggplot(sitka, aes(x=size, y = Time, color = tree, group = tree)) + geom_line() + facet_wrap(~treat)
# R code goes here.
color <- viridis()
# R code goes here.
ggplot(sitka, aes(x=size, y = Time, color = tree, group = tree)) + geom_line() + facet_wrap(~treat)
# R code goes here.
ggplot(sitka, aes(y=size, x = Time, color = tree, group = tree)) + geom_line() + facet_wrap(~treat)
ggplot(sitka, aes(y=size, x = Time, color = size, group = tree)) + geom_line() + facet_wrap(~treat)
ggplot(sitka, aes(y=size, x = Time, color = factor(tree), group = tree)) + geom_line() + facet_wrap(~treat)
ggplot(iris, aes(x=Petal.Length, y = Sepal.Length, color = Species)) + geom_point() + geom_density2d()
ggplot(iris, aes(y=Petal.Length, x = Sepal.Length, color = Species)) + geom_point() + geom_density2d()
getwd()
pinetree_counts <- read.table("slow_transcript_2_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species)) + geom_line(aes(color = species)) + ggtitle("Protein Production Rate with slow codons")
pinetree_counts <- read.table("fast_transcript_3_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species)) + geom_line(aes(color = species)) + ggtitle("Protein Production Rate with fast codons")
pinetree_counts <- read.table("fast_transcript_3_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species)) + geom_line(aes(color = species)) + ggtitle("Protein Production Rate with fast codons")
pinetree_counts <- read.table("fast_transcript_3_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species)) + geom_line(aes(color = species)) + ggtitle("Protein Production Rate with fast codons")
install.packages("ggplot2movies")
pinetree_counts <- read.table("function_test.tsv", sep = "\t", header = TRUE)
getwd()
pinetree_counts <- read.table("function_test_counts.tsv", sep = "\t", header = TRUE)
pinetree_tbl <- as.tibble(pinetree_counts)
pinetree_plot <- pinetree_tbl %>% filter(species %in% c("proteinP","__ribosome"))
ggplot(data = pinetree_plot, aes(x=time, y=protein, group=species)) + geom_line(aes(color = species)) + ggtitle("mixed transcript")
setwd("/Users/kokushka/Documents/First Year/Wilke Lab/Programs/pt_evolution/")
library(tidyverse)
protein_rates <- read.csv("production_rates.csv", header = TRUE, sep = ',')
head(protein_rates)
mean(protein_rates$ProductionRate)
library(tidyverse)
protein_rates <- read.csv("production_rates.csv", header = TRUE, sep = ',')
mean(protein_rates$ProductionRate)
